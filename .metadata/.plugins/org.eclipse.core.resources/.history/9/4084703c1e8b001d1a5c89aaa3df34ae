package member_crud;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

public class MemberDAO {
	int insertMember(MemberDTO dto) {
		// dto전달 내용을 member테이블 입력
		// 회원가입일 now()
		Connection con = null;
		PreparedStatement pt = null;
		int cnt = 0;
		MemberDTO selecteddto = getMember(dto.getId(),dto.getPw()); // 연결 - 해제
		
//		if(selecteddto != null) {
//			System.out.println("아이디 중복입니다. 다른아이디를 입력하세요");
//			return 0; //메소드 중단하고싶다 
//			//void 아무것도 안써도되지만 리턴타입이 정해져있어서 0 입력
//		}
		
		try {
			//1. DB연결
			Class.forName(ConnectionInform.DRIVER_CLASS);
			con = DriverManager.getConnection(ConnectionInform.JDBC_URL, ConnectionInform.USERNAME,
					ConnectionInform.PASSWORD);
			/* 
			 * MemberDTO dto = getMember(id, pw);
			 * dto == null --> 정상insert
			 * dto != null --> "아이디 중복입니다. 다른 아이디를 입력하세요 "
			 * */
				
			
			String sql = "insert into member values(?,?,?,?,?,?,now())";
			pt = con.prepareStatement(sql);
			pt.setString(1, dto.getId());
			pt.setString(2, dto.getPw());
			pt.setString(3, dto.getName());
			pt.setString(4, dto.getPhone());
			pt.setString(5, dto.getEmail());
			pt.setString(6, dto.getAddress());
			cnt = pt.executeUpdate(); // insert

			if (cnt == 1) {
				System.out.println("성공");
			}
		
			
		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				pt.close();
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return cnt;

	}// insertMember end

	public int getTotalMember() {
		Connection con = null;
		PreparedStatement pt = null;
		int cnt = 0;

		try {
			Class.forName(ConnectionInform.DRIVER_CLASS);
			con = DriverManager.getConnection(ConnectionInform.JDBC_URL, ConnectionInform.USERNAME,
					ConnectionInform.PASSWORD);

			String sql = "select count(*) from member"; // 1행 1열
			pt = con.prepareStatement(sql);
			ResultSet rs = pt.executeQuery(); // select
			rs.next();
			// rs.getInt(1);
			if (rs.getString("count(*)") == null) {
				cnt = 0;
			} else {
				cnt = rs.getInt("count(*)");
			}

		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				pt.close();
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return cnt;

	}

	ArrayList<MemberDTO> getMemberList(int Page, int memberPerPage) {
		Connection con = null;
		PreparedStatement pt = null;
		int cnt = 0;
		ArrayList<MemberDTO> list = new ArrayList();
		
		try {
			Class.forName(ConnectionInform.DRIVER_CLASS);
			con = DriverManager.getConnection(ConnectionInform.JDBC_URL, ConnectionInform.USERNAME,
					ConnectionInform.PASSWORD);
			
			
			// insert ('12345', 1인덱스부터,2번인덱스까지,repeat("*",2)) ->**345
			// insert ('pw', 2, char_length(pw)-1,repeat("*",char_length(pw)-1)) ->**345
			
			String sql = "select id, insert('pw', 2, char_length(pw)-1,repeat('*',char_length(pw)-1)) as pw, name, indate"
					+ " from member order by indate limit ?,?"; // 1행 1열
			pt = con.prepareStatement(sql);
			
			pt.setInt(1,(Page -1)* memberPerPage); // 1,2,3  0,3,6
			pt.setInt(2, memberPerPage);
			ResultSet rs = pt.executeQuery(); // select
			
			while(rs.next()) {
				
				MemberDTO dto = new MemberDTO(rs.getString("id"),rs.getString("name"),rs.getString("indate") );
				
				//rs.getString("id");
				//rs.getString("name");
				//rs.getString("indate");
				dto.setPw(rs.getString("pw"));
				list.add(dto);
			}
			

		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				pt.close();
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return list;

	}

	public MemberDTO getMember(String id, String pw) {
		Connection con = null;
		PreparedStatement pt = null;
		MemberDTO dto= null;
		
		try {
			Class.forName(ConnectionInform.DRIVER_CLASS);
			con = DriverManager.getConnection(ConnectionInform.JDBC_URL, ConnectionInform.USERNAME,
					ConnectionInform.PASSWORD);
			
			String sql = "SELECT * FROM member WHERE id =? ";
			pt = con.prepareStatement(sql);
			pt.setString(1, id);
//			pt.setString(2, pw);
			
			ResultSet rs = pt.executeQuery(); // select
			// rs.next() true 값이 하나여서 true라면 일치, 값이 있다
			
			if(rs.next()) {
				// db에서 pw가져옴
				String dbpw = rs.getString("pw");
				if(pw.equals(dbpw)) {
					// 암호도 맞다 
					dto = new MemberDTO(rs.getString("id"), rs.getString("pw"),rs.getString("name"),
							rs.getString("email"),rs.getString("phone"),
							rs.getString("address"),rs.getString("indate"));
				}else {
					dto = new MemberDTO();
					dto.setId(rs.getString("id"));
					//암호가 다르면 id만 저장한 멤버객체리턴??
					System.out.println("암호 맞지않습니다. 다시 4번 입력하세요.");
				}
			
			}else { // id가 없다
				System.out.println("1번 가입부터하세요");
			}
			

		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				pt.close();
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return dto;
	}
	
	public void updateMember(HashMap<String ,String> updateMap){
		   Connection con = null;
		   PreparedStatement pt = null;
		   try {
		      Class.forName(ConnectionInform.DRIVER_CLASS);
		      con = DriverManager.getConnection(ConnectionInform.JDBC_URL, ConnectionInform.USERNAME,
		            ConnectionInform.PASSWORD);

		      StringBuffer sql =  new StringBuffer(); //16문자버퍼 +....
		      sql.append("update member set ");
		      Set<String> keys = updateMap.keySet();
		      for(String k : keys){
		         if(!k.equals("id")){
		            sql.append(k + "= '" + updateMap.get(k) + "' ,");
		         }
		      }
		      sql.deleteCharAt(sql.lastIndexOf(","));//마지막 ","를 빼라
		      sql.append(" where id=?");
		      System.out.println(sql); //쿼리 메인 확인
		      pt = con.prepareStatement(sql.toString());
		      pt.setString(1, updateMap.get("id"));
		      pt.executeUpdate();

		   } catch (SQLException | ClassNotFoundException e) {
		      e.printStackTrace();
		   } finally {
		      try {
		         pt.close();
		         con.close();
		      } catch (SQLException e) {
		         e.printStackTrace();
		      }
		   }

		} // updateMember
	
	
}
